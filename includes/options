<h1 id='options'>Options</h1><pre class="highlight javascript"><code><span class="nx">YAML</span><span class="p">.</span><span class="nx">defaultOptions</span>
<span class="c1">// { keepBlobsInJSON: true,</span>
<span class="c1">//   keepNodeTypes: true,</span>
<span class="c1">//   version: '1.2' }</span>

<span class="nx">YAML</span><span class="p">.</span><span class="nx">Document</span><span class="p">.</span><span class="nx">defaults</span>
<span class="c1">// { '1.0': { merge: true, schema: 'yaml-1.1' },</span>
<span class="c1">//   '1.1': { merge: true, schema: 'yaml-1.1' },</span>
<span class="c1">//   '1.2': { merge: false, schema: 'core' } }</span>
</code></pre><h4 id='yaml-defaultoptions'><code>YAML.defaultOptions</code></h4><h4 id='yaml-document-defaults'><code>YAML.Document.defaults</code></h4>
<p><code>yaml</code> defines options in three places: as an argument of parse, create and stringify calls, in the values of <code>YAML.defaultOptions</code>, and in the version-dependent <code>YAML.Document.defaults</code> object. Values set in <code>YAML.defaultOptions</code> override version-dependent defaults, and argument options override both.</p>

<p>The <code>version</code> option value (<code>&#39;1.2&#39;</code> by default) may be overridden by any document-specific <code>%YAML</code> directive.</p>

<table><thead>
<tr>
<th>Option</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>keepBlobsInJSON</td>
<td><code>boolean</code></td>
<td>Allow non-JSON JavaScript objects to remain in the <code>toJSON</code> output. Relevant with the YAML 1.1 <code>!!timestamp</code> and <code>!!binary</code> tags. By default <code>true</code>.</td>
</tr>
<tr>
<td>keepCstNodes</td>
<td><code>boolean</code></td>
<td>Include references in the AST to each node&#39;s corresponding CST node. By default <code>false</code>.</td>
</tr>
<tr>
<td>keepNodeTypes</td>
<td><code>boolean</code></td>
<td>Store the original node type when parsing documents. By default <code>true</code>.</td>
</tr>
<tr>
<td>merge</td>
<td><code>boolean</code></td>
<td>Enable support for <code>&lt;&lt;</code> merge keys.</td>
</tr>
<tr>
<td>schema</td>
<td><code>&#39;core&#39;</code> &vert; <code>&#39;failsafe&#39;</code> &vert; <code>&#39;json&#39;</code> &vert; <code>&#39;yaml-1.1&#39;</code></td>
<td>The base schema to use. By default <code>&#39;core&#39;</code> for YAML 1.2 and <code>&#39;yaml-1.1&#39;</code> for earlier versions.</td>
</tr>
<tr>
<td>tags</td>
<td><a href="#tag"><code>Tag[]</code></a> &vert; <code>function</code></td>
<td>Array of additional (custom) tags to include in the schema</td>
</tr>
<tr>
<td>version</td>
<td><code>string</code></td>
<td>The YAML version used by documents without a <code>%YAML</code> directive. By default <code>&#39;1.2&#39;</code>.</td>
</tr>
</tbody></table>
<h2 id='data-schemas'>Data Schemas</h2><pre class="highlight javascript"><code><span class="nx">YAML</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'3'</span><span class="p">)</span> <span class="c1">// 3</span>
<span class="nx">YAML</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'3'</span><span class="p">,</span> <span class="p">{</span> <span class="na">schema</span><span class="p">:</span> <span class="s1">'failsafe'</span> <span class="p">})</span> <span class="c1">// '3'</span>

<span class="nx">YAML</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'No'</span><span class="p">)</span> <span class="c1">// 'No'</span>
<span class="nx">YAML</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'No'</span><span class="p">,</span> <span class="p">{</span> <span class="na">schema</span><span class="p">:</span> <span class="s1">'json'</span> <span class="p">})</span> <span class="c1">// SyntaxError: Unresolved plain scalar "No"</span>
<span class="nx">YAML</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'No'</span><span class="p">,</span> <span class="p">{</span> <span class="na">schema</span><span class="p">:</span> <span class="s1">'yaml-1.1'</span> <span class="p">})</span> <span class="c1">// false</span>
<span class="nx">YAML</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'No'</span><span class="p">,</span> <span class="p">{</span> <span class="na">version</span><span class="p">:</span> <span class="s1">'1.1'</span> <span class="p">})</span> <span class="c1">// false</span>
</code></pre>
<p>Aside from defining the language structure, the YAML 1.2 spec defines a number of different <strong>schemas</strong> that may be used. The default is the <a href="http://yaml.org/spec/1.2/spec.html#id2804923"><code>core</code></a> schema, which is the most common one. The <a href="http://yaml.org/spec/1.2/spec.html#id2803231"><code>json</code></a> schema is effectively the minimum schema required to parse JSON; both it and the core schema are supersets of the minimal <a href="http://yaml.org/spec/1.2/spec.html#id2802346"><code>failsafe</code></a> schema.</p>

<p>The <code>yaml-1.1</code> schema matches the more liberal <a href="http://yaml.org/type/">YAML 1.1 types</a> (also used by YAML 1.0), including binary data and timestamps as distinct tags as well as accepting greater variance in scalar values (with e.g. <code>&#39;No&#39;</code> being parsed as <code>false</code> rather than a string value). The <code>!!value</code> and <code>!!yaml</code> types are not supported.</p>
<pre class="highlight javascript"><code><span class="nx">YAML</span><span class="p">.</span><span class="nx">defaultOptions</span><span class="p">.</span><span class="nx">merge</span> <span class="o">=</span> <span class="kc">true</span>

<span class="kr">const</span> <span class="nx">mergeResult</span> <span class="o">=</span> <span class="nx">YAML</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s2">`
source: &amp;base { a: 1, b: 2 }
target:
  &lt;&lt;: *base
  b: base
`</span><span class="p">)</span>

<span class="nx">mergeResult</span><span class="p">.</span><span class="nx">target</span>
<span class="c1">// { a: 1, b: 'base' }</span>
</code></pre>
<p><strong>Merge</strong> keys are a <a href="http://yaml.org/type/merge.html">YAML 1.1 feature</a> that is not a part of the 1.2 spec. To use a merge key, assign an alias node or an array of alias nodes as the value of a <code>&lt;&lt;</code> key in a mapping.</p>
<h2 id='custom-tags'>Custom Tags</h2><pre class="highlight javascript"><code><span class="kr">import</span> <span class="p">{</span> <span class="nx">binary</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'yaml/types/binary'</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">timestamp</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'yaml/types/timestamp'</span>

<span class="nx">YAML</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'!!timestamp 2001-12-15 2:59:43'</span><span class="p">)</span>
<span class="c1">// YAMLWarning:</span>
<span class="c1">//   The tag tag:yaml.org,2002:timestamp is unavailable,</span>
<span class="c1">//   falling back to tag:yaml.org,2002:str</span>
<span class="c1">// '2001-12-15 2:59:43'</span>

<span class="nx">YAML</span><span class="p">.</span><span class="nx">defaultOptions</span><span class="p">.</span><span class="nx">tags</span> <span class="o">=</span> <span class="p">[</span><span class="nx">binary</span><span class="p">,</span> <span class="nx">timestamp</span><span class="p">]</span>

<span class="nx">YAML</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">'2001-12-15 2:59:43'</span><span class="p">)</span>
<span class="c1">// 2001-12-15T02:59:43.000Z</span>

<span class="kr">const</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">YAML</span><span class="p">.</span><span class="nx">parseDocument</span><span class="p">(</span><span class="s1">'2001-12-15 2:59:43'</span><span class="p">)</span>
<span class="nx">doc</span><span class="p">.</span><span class="nx">contents</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toDateString</span><span class="p">()</span>
<span class="c1">// 'Sat Dec 15 2001'</span>
</code></pre>
<p>The easiest way to extend a schema is by defining the additional <strong>tags</strong> that you wish to support. For further customisation, <code>tags</code> may also be a function <code>(Tag[]) =&gt; (Tag[])</code> that may modify the schema&#39;s base tag array.</p>

<p>The <code>!!binary</code> and <code>!!timestamp</code> YAML 1.1 tags are available as exports under <code>yaml/types/</code>, should you wish to use them with the YAML 1.2 <code>core</code> schema.</p>

<p>If you wish to implement your own custom tags, the <a href="https://github.com/eemeli/yaml/blob/master/src/schema/_binary.js"><code>!!binary</code></a> and <a href="https://github.com/eemeli/yaml/blob/master/src/schema/_timestamp.js"><code>!!timestamp</code></a> tags provide relatively cohesive examples to study.</p>

<h4 id="tag" style="clear:both"><code>Tag</code></h4>

<table><thead>
<tr>
<th>Member</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>class</td>
<td><code>class?</code></td>
<td>A JavaScript class that should be matched to this tag, e.g. <code>Date</code> for <code>!!timestamp</code>.</td>
</tr>
<tr>
<td>default</td>
<td><code>boolean?</code></td>
<td>If <code>true</code>, the tag should not be explicitly included when stringifying.</td>
</tr>
<tr>
<td>format</td>
<td><code>string?</code></td>
<td>If a tag has multiple forms that should be parsed and/or stringified differently, use <code>format</code> to identify them.</td>
</tr>
<tr>
<td>options</td>
<td><code>object?</code></td>
<td>Used by some tags to configure their stringification, where applicable.</td>
</tr>
<tr>
<td>resolve</td>
<td><code>() =&gt; Node</code></td>
<td>Should return an instance of a class extending <code>Node</code>. If <code>test</code> is set, will be called with the resulting match as arguments. Otherwise, will be called as <code>resolve(doc, cstNode)</code>.</td>
</tr>
<tr>
<td>stringify</td>
<td><code>() =&gt; string</code></td>
<td>Called as <code>stringify(item, ctx, onComment)</code>, where <code>item</code> is the node being stringified, <code>ctx</code> contains the stringifying context variables, and <code>onComment</code> is a function that should be called if the stringifier includes the item&#39;s comment in its output.</td>
</tr>
<tr>
<td>tag</td>
<td><code>string</code></td>
<td>The fully qualified name of the tag.</td>
</tr>
<tr>
<td>test</td>
<td><code>RegExp?</code></td>
<td>Used to match string values of scalar nodes; captured parts will be passed as arguments of <code>resolve()</code>.</td>
</tr>
</tbody></table>
<h2 id='tag-stringifier-options'>Tag Stringifier Options</h2><pre class="highlight javascript"><code><span class="kr">const</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">YAML</span><span class="p">.</span><span class="nx">parseDocument</span><span class="p">(</span><span class="s1">'this is: null'</span><span class="p">)</span>
<span class="nx">doc</span><span class="p">.</span><span class="nx">contents</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="c1">// Pair {</span>
<span class="c1">//   key: Scalar { value: 'this is', range: [ 0, 7 ], type: 'PLAIN' },</span>
<span class="c1">//   value: Scalar { value: null, range: [ 9, 13 ], type: 'PLAIN' } }</span>

<span class="kr">const</span> <span class="nx">nullTag</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">schema</span><span class="p">.</span><span class="nx">schema</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span>
  <span class="p">({</span> <span class="nx">tag</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">tag</span> <span class="o">===</span> <span class="s1">'tag:yaml.org,2002:null'</span>
<span class="p">)</span>
<span class="nx">nullTag</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">nullStr</span> <span class="o">=</span> <span class="s1">'~'</span>

<span class="nb">String</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span>
<span class="c1">// this is: ~</span>
</code></pre>
<p>Some of the tags (in particular <code>!!null</code>, <code>!!str</code> and <code>!!binary</code>) support additional customisations for their YAML stringification. To adjust those, modify the <code>options</code> object of the appropriate tag.</p>
