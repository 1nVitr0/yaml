<h1 id='options'>Options</h1><div class="highlight"><pre class="highlight javascript"><code><span class="nx">YAML</span><span class="p">.</span><span class="nx">defaultOptions</span>
<span class="c1">// { keepBlobsInJSON: true,</span>
<span class="c1">//   keepNodeTypes: true,</span>
<span class="c1">//   version: '1.2' }</span>

<span class="nx">YAML</span><span class="p">.</span><span class="nx">Document</span><span class="p">.</span><span class="nx">defaults</span>
<span class="c1">// { '1.0': { merge: true, schema: 'yaml-1.1' },</span>
<span class="c1">//   '1.1': { merge: true, schema: 'yaml-1.1' },</span>
<span class="c1">//   '1.2': { merge: false, schema: 'core' } }</span>
</code></pre></div><h4 id='yaml-defaultoptions'><code>YAML.defaultOptions</code></h4><h4 id='yaml-document-defaults'><code>YAML.Document.defaults</code></h4>
<p><code>yaml</code> defines document-specific options in three places: as an argument of parse, create and stringify calls, in the values of <code>YAML.defaultOptions</code>, and in the version-dependent <code>YAML.Document.defaults</code> object. Values set in <code>YAML.defaultOptions</code> override version-dependent defaults, and argument options override both.</p>

<p>The <code>version</code> option value (<code>&#39;1.2&#39;</code> by default) may be overridden by any document-specific <code>%YAML</code> directive.</p>

<table><thead>
<tr>
<th>Option</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>anchorPrefix</td>
<td><code>string</code></td>
<td>Default prefix for anchors. By default <code>&#39;a&#39;</code>, resulting in anchors <code>a1</code>, <code>a2</code>, etc.</td>
</tr>
<tr>
<td>customTags</td>
<td><code>Tag[] ⎮ function</code></td>
<td>Array of <a href="#custom-data-types">additional tags</a> to include in the schema</td>
</tr>
<tr>
<td>indent</td>
<td><code>number</code></td>
<td>The number of spaces to use when indenting code. By default <code>2</code>.</td>
</tr>
<tr>
<td>indentSeq</td>
<td><code>boolean</code></td>
<td>Whether block sequences should be indented. By default <code>true</code>.</td>
</tr>
<tr>
<td>keepBlobsInJSON</td>
<td><code>boolean</code></td>
<td>Allow non-JSON JavaScript objects to remain in the <code>toJSON</code> output. Relevant with the YAML 1.1 <code>!!timestamp</code> and <code>!!binary</code> tags as well as BigInts. By default <code>true</code>.</td>
</tr>
<tr>
<td>keepCstNodes</td>
<td><code>boolean</code></td>
<td>Include references in the AST to each node&#39;s corresponding CST node. By default <code>false</code>.</td>
</tr>
<tr>
<td>keepNodeTypes</td>
<td><code>boolean</code></td>
<td>Store the original node type when parsing documents. By default <code>true</code>.</td>
</tr>
<tr>
<td>mapAsMap</td>
<td><code>boolean</code></td>
<td>When outputting JS, use Map rather than Object to represent mappings. By default <code>false</code>.</td>
</tr>
<tr>
<td>maxAliasCount</td>
<td><code>number</code></td>
<td>Prevent <a href="https://en.wikipedia.org/wiki/Billion_laughs_attack">exponential entity expansion attacks</a> by limiting data aliasing count; set to <code>-1</code> to disable checks; <code>0</code> disallows all alias nodes. By default <code>100</code>.</td>
</tr>
<tr>
<td>merge</td>
<td><code>boolean</code></td>
<td>Enable support for <code>&lt;&lt;</code> merge keys. By default <code>false</code> for YAML 1.2 and <code>true</code> for earlier versions.</td>
</tr>
<tr>
<td>prettyErrors</td>
<td><code>boolean</code></td>
<td>Include line position &amp; node type directly in errors; drop their verbose source and context. By default <code>false</code>.</td>
</tr>
<tr>
<td>resolveKnownTags</td>
<td><code>boolean</code></td>
<td>When using the <code>&#39;core&#39;</code> schema, support parsing values with these explicit <a href="https://yaml.org/type/">YAML 1.1 tags</a>: <code>!!binary</code>, <code>!!omap</code>, <code>!!pairs</code>, <code>!!set</code>, <code>!!timestamp</code>. By default <code>true</code>.</td>
</tr>
<tr>
<td>schema</td>
<td><code>&#39;core&#39; ⎮ &#39;failsafe&#39; ⎮</code> <code>&#39;json&#39; ⎮ &#39;yaml-1.1&#39;</code></td>
<td>The base schema to use. By default <code>&#39;core&#39;</code> for YAML 1.2 and <code>&#39;yaml-1.1&#39;</code> for earlier versions.</td>
</tr>
<tr>
<td>simpleKeys</td>
<td><code>boolean</code></td>
<td>When stringifying, require keys to be scalars and to use implicit rather than explicit notation. By default <code>false</code>.</td>
</tr>
<tr>
<td>sortMapEntries</td>
<td><code>boolean ⎮</code> <code>(a, b: Pair) =&gt; number</code></td>
<td>When stringifying, sort map entries. If <code>true</code>, sort by comparing key values with <code>&lt;</code>. By default <code>false</code>.</td>
</tr>
<tr>
<td>version</td>
<td><code>&#39;1.0&#39; ⎮ &#39;1.1&#39; ⎮ &#39;1.2&#39;</code></td>
<td>The YAML version used by documents without a <code>%YAML</code> directive. By default <code>&#39;1.2&#39;</code>.</td>
</tr>
</tbody></table>
<h2 id='data-schemas'>Data Schemas</h2><div class="highlight"><pre class="highlight javascript"><code><span class="nx">YAML</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="dl">'</span><span class="s1">3</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// 3</span>
<span class="nx">YAML</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="dl">'</span><span class="s1">3</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">schema</span><span class="p">:</span> <span class="dl">'</span><span class="s1">failsafe</span><span class="dl">'</span> <span class="p">})</span> <span class="c1">// '3'</span>

<span class="nx">YAML</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="dl">'</span><span class="s1">No</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// 'No'</span>
<span class="nx">YAML</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="dl">'</span><span class="s1">No</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">schema</span><span class="p">:</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span> <span class="p">})</span> <span class="c1">// SyntaxError: Unresolved plain scalar "No"</span>
<span class="nx">YAML</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="dl">'</span><span class="s1">No</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">schema</span><span class="p">:</span> <span class="dl">'</span><span class="s1">yaml-1.1</span><span class="dl">'</span> <span class="p">})</span> <span class="c1">// false</span>
<span class="nx">YAML</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="dl">'</span><span class="s1">No</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">version</span><span class="p">:</span> <span class="dl">'</span><span class="s1">1.1</span><span class="dl">'</span> <span class="p">})</span> <span class="c1">// false</span>

<span class="nx">YAML</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="dl">'</span><span class="s1">{[1, 2]: many}</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// { '[1,2]': 'many' }</span>
<span class="nx">YAML</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="dl">'</span><span class="s1">{[1, 2]: many}</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">mapAsMap</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span> <span class="c1">// Map { [ 1, 2 ] =&gt; 'many' }</span>
</code></pre></div>
<p>Aside from defining the language structure, the YAML 1.2 spec defines a number of different <em>schemas</em> that may be used. The default is the <a href="http://yaml.org/spec/1.2/spec.html#id2804923"><code>core</code></a> schema, which is the most common one. The <a href="http://yaml.org/spec/1.2/spec.html#id2803231"><code>json</code></a> schema is effectively the minimum schema required to parse JSON; both it and the core schema are supersets of the minimal <a href="http://yaml.org/spec/1.2/spec.html#id2802346"><code>failsafe</code></a> schema.</p>

<p>The <code>yaml-1.1</code> schema matches the more liberal <a href="http://yaml.org/type/">YAML 1.1 types</a> (also used by YAML 1.0), including binary data and timestamps as distinct tags as well as accepting greater variance in scalar values (with e.g. <code>&#39;No&#39;</code> being parsed as <code>false</code> rather than a string value). The <code>!!value</code> and <code>!!yaml</code> types are not supported.</p>
<div class="highlight"><pre class="highlight javascript"><code><span class="nx">YAML</span><span class="p">.</span><span class="nx">defaultOptions</span><span class="p">.</span><span class="nx">merge</span> <span class="o">=</span> <span class="kc">true</span>

<span class="kd">const</span> <span class="nx">mergeResult</span> <span class="o">=</span> <span class="nx">YAML</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s2">`
source: &amp;base { a: 1, b: 2 }
target:
  &lt;&lt;: *base
  b: base
`</span><span class="p">)</span>

<span class="nx">mergeResult</span><span class="p">.</span><span class="nx">target</span>
<span class="c1">// { a: 1, b: 'base' }</span>
</code></pre></div>
<p><strong>Merge</strong> keys are a <a href="http://yaml.org/type/merge.html">YAML 1.1 feature</a> that is not a part of the 1.2 spec. To use a merge key, assign an alias node or an array of alias nodes as the value of a <code>&lt;&lt;</code> key in a mapping.</p>
<h2 id='scalar-options'>Scalar Options</h2><div class="highlight"><pre class="highlight javascript"><code><span class="c1">// Without simpleKeys, an all-null-values object uses explicit keys &amp; no values</span>
<span class="nx">YAML</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="dl">'</span><span class="s1">this is</span><span class="dl">'</span><span class="p">:</span> <span class="kc">null</span> <span class="p">},</span> <span class="p">{</span> <span class="na">simpleKeys</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span>
<span class="c1">// this is: null</span>

<span class="nx">YAML</span><span class="p">.</span><span class="nx">scalarOptions</span><span class="p">.</span><span class="kc">null</span><span class="p">.</span><span class="nx">nullStr</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">~</span><span class="dl">'</span>
<span class="nx">YAML</span><span class="p">.</span><span class="nx">scalarOptions</span><span class="p">.</span><span class="nx">str</span><span class="p">.</span><span class="nx">defaultType</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">QUOTE_SINGLE</span><span class="dl">'</span>
<span class="nx">YAML</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">this</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span> <span class="na">that</span><span class="p">:</span> <span class="dl">'</span><span class="s1">value</span><span class="dl">'</span> <span class="p">})</span>
<span class="c1">// this: ~</span>
<span class="c1">// that: 'value'</span>
</code></pre></div><h4 id='yaml-scalaroptions'><code>YAML.scalarOptions</code></h4>
<p>Some customization options are availabe to control the parsing and stringification of scalars. Note that these values are used by all documents.</p>

<p>These options objects are also exported individually from <code>&#39;yaml/types&#39;</code>.</p>

<table><thead>
<tr>
<th>Option</th>
<th>Type</th>
<th>Default value</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>binary.defaultType</td>
<td><code>Type</code></td>
<td><code>&#39;BLOCK_LITERAL&#39;</code></td>
<td>The type of string literal used to stringify <code>!!binary</code> values</td>
</tr>
<tr>
<td>binary.lineWidth</td>
<td><code>number</code></td>
<td><code>76</code></td>
<td>Maximum line width for <code>!!binary</code> values</td>
</tr>
<tr>
<td>bool.trueStr</td>
<td><code>string</code></td>
<td><code>&#39;true&#39;</code></td>
<td>String representation for <code>true</code> values</td>
</tr>
<tr>
<td>bool.falseStr</td>
<td><code>string</code></td>
<td><code>&#39;false&#39;</code></td>
<td>String representation for <code>false</code> values</td>
</tr>
<tr>
<td>int.asBigInt</td>
<td><code>boolean</code></td>
<td><code>false</code></td>
<td>Whether integers should be parsed into <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/BigInt">BigInt</a> values</td>
</tr>
<tr>
<td>null.nullStr</td>
<td><code>string</code></td>
<td><code>&#39;null&#39;</code></td>
<td>String representation for <code>null</code> values</td>
</tr>
<tr>
<td>str.defaultType</td>
<td><code>Type</code></td>
<td><code>&#39;PLAIN&#39;</code></td>
<td>The default type of string literal used to stringify values in general</td>
</tr>
<tr>
<td>str.defaultKeyType</td>
<td><code>Type</code></td>
<td><code>&#39;PLAIN&#39;</code></td>
<td>The default type of string literal used to stringify implicit key values</td>
</tr>
<tr>
<td>str.doubleQuoted</td>
<td><code>object</code></td>
<td><code>{ jsonEncoding: false,</code> <code>minMultiLineLength: 40 }</code></td>
<td><code>jsonEncoding</code>: Whether to restrict double-quoted strings to use JSON-compatible syntax; <code>minMultiLineLength</code>: Minimum length to use multiple lines to represent the value</td>
</tr>
<tr>
<td>str.fold</td>
<td><code>object</code></td>
<td><code>{ lineWidth: 80,</code> <code>minContentWidth: 20 }</code></td>
<td><code>lineWidth</code>: Maximum line width (set to <code>0</code> to disable folding); <code>minContentWidth</code>: Minimum width for highly-indented content</td>
</tr>
</tbody></table>
<h2 id='silencing-warnings'>Silencing Warnings</h2>
<p>By default, the library will emit warnings as required by the YAML spec during parsing. If you&#39;d like to silence these, define a global or <code>process.env</code> variable <code>YAML_SILENCE_WARNINGS</code> with a true-ish value.</p>
