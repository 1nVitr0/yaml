<h1 id='content-nodes'>Content Nodes</h1>
<p>After parsing, the <code>contents</code> value of each <code>YAML.Document</code> is the root of an <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">Abstract Syntax Tree</a> of nodes representing the document (or <code>null</code> for an empty document).</p>
<h2 id='scalar-values'>Scalar Values</h2><pre class="highlight javascript"><code><span class="kr">class</span> <span class="nx">Node</span> <span class="p">{</span>
  <span class="nl">comment</span><span class="p">:</span> <span class="p">?</span><span class="nx">string</span><span class="p">,</span>   <span class="c1">// a comment on or immediately after this</span>
  <span class="nx">commentBefore</span><span class="p">:</span> <span class="p">?</span><span class="nx">string</span><span class="p">,</span> <span class="c1">// a comment before this</span>
  <span class="nx">range</span><span class="p">:</span> <span class="p">?[</span><span class="nx">number</span><span class="p">,</span> <span class="nx">number</span><span class="p">],</span>
      <span class="c1">// the [start, end] range of characters of the source parsed</span>
      <span class="c1">// into this node (undefined for pairs or if not parsed)</span>
  <span class="nx">tag</span><span class="p">:</span> <span class="p">?</span><span class="nx">string</span><span class="p">,</span>       <span class="c1">// a fully qualified tag, if required</span>
  <span class="nx">toJSON</span><span class="p">():</span> <span class="nx">any</span>       <span class="c1">// a plain JS representation of this node</span>
<span class="p">}</span>
</code></pre>
<p>For scalar values, the <code>tag</code> will not be set unless it was explicitly defined in the source document; this also applies for unsupported tags that have been resolved using a fallback tag (string, <code>Map</code>, or <code>Seq</code>).</p>
<pre class="highlight javascript"><code><span class="kr">class</span> <span class="nx">Scalar</span> <span class="kr">extends</span> <span class="nx">Node</span> <span class="p">{</span>
  <span class="nl">format</span><span class="p">:</span> <span class="s1">'BIN'</span> <span class="o">|</span> <span class="s1">'HEX'</span> <span class="o">|</span> <span class="s1">'OCT'</span> <span class="o">|</span> <span class="s1">'TIME'</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">,</span>
      <span class="c1">// By default (undefined), numbers use decimal notation.</span>
      <span class="c1">// The YAML 1.2 core schema only supports 'HEX' and 'OCT'.</span>
  <span class="nx">type</span><span class="p">:</span>
    <span class="s1">'BLOCK_FOLDED'</span> <span class="o">|</span> <span class="s1">'BLOCK_LITERAL'</span> <span class="o">|</span> <span class="s1">'PLAIN'</span> <span class="o">|</span>
    <span class="s1">'QUOTE_DOUBLE'</span> <span class="o">|</span> <span class="s1">'QUOTE_SINGLE'</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">,</span>
  <span class="nx">value</span><span class="p">:</span> <span class="nx">any</span>
<span class="p">}</span>
</code></pre>
<p>A parsed document&#39;s contents will have all of its non-object values wrapped in <code>Scalar</code> objects, which themselves may be in some hierarchy of <code>Map</code> and <code>Seq</code> collections. However, this is not a requirement for the document&#39;s stringification, which is rather tolerant regarding its input values, and will use <a href="#yaml-createnode"><code>YAML.createNode</code></a> when encountering an unwrapped value.</p>

<p>When stringifying, the node <code>type</code> will be taken into account by <code>!!str</code> and <code>!!binary</code> values, and ignored by other scalars. On the other hand, <code>!!int</code> and <code>!!float</code> stringifiers will take <code>format</code> into account.</p>
<h2 id='collections'>Collections</h2><pre class="highlight javascript"><code><span class="kr">class</span> <span class="nx">Pair</span> <span class="kr">extends</span> <span class="nx">Node</span> <span class="p">{</span>
  <span class="nl">key</span><span class="p">:</span> <span class="nx">Node</span> <span class="o">|</span> <span class="nx">any</span><span class="p">,</span>    <span class="c1">// key and value are always Node or null</span>
  <span class="nx">value</span><span class="p">:</span> <span class="nx">Node</span> <span class="o">|</span> <span class="nx">any</span><span class="p">,</span>  <span class="c1">// when parsed, but can be set to anything</span>
  <span class="nx">type</span><span class="p">:</span> <span class="s1">'PAIR'</span>
<span class="p">}</span>

<span class="kr">class</span> <span class="nx">Map</span> <span class="kr">extends</span> <span class="nx">Node</span> <span class="p">{</span>
  <span class="nl">items</span><span class="p">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">Pair</span><span class="o">&gt;</span><span class="p">,</span>
  <span class="nx">type</span><span class="p">:</span> <span class="s1">'FLOW_MAP'</span> <span class="o">|</span> <span class="s1">'MAP'</span> <span class="o">|</span> <span class="kc">undefined</span>
<span class="p">}</span>

<span class="kr">class</span> <span class="nx">Seq</span> <span class="kr">extends</span> <span class="nx">Node</span> <span class="p">{</span>
  <span class="nl">items</span><span class="p">:</span> <span class="nb">Array</span><span class="o">&lt;</span><span class="nx">Node</span> <span class="o">|</span> <span class="nx">any</span><span class="o">&gt;</span><span class="p">,</span>
  <span class="nx">type</span><span class="p">:</span> <span class="s1">'FLOW_SEQ'</span> <span class="o">|</span> <span class="s1">'SEQ'</span> <span class="o">|</span> <span class="kc">undefined</span>
<span class="p">}</span>
</code></pre>
<p>Within a YAML document, two forms of collections are supported: sequential <code>Seq</code> collections and key-value <code>Map</code> collections. The JavaScript representations of these collections both have an <code>items</code> array, which may (<code>Seq</code>) or must (<code>Map</code>) consist of <code>Pair</code> objects that contain a <code>key</code> and a <code>value</code> of any type, including <code>null</code>. The <code>items</code> array of a <code>Seq</code> object may contain values of any type.</p>

<p>When stringifying collections, by default block notation will be used. Flow notation will be selected if <code>type</code> is <code>FLOW_MAP</code> or <code>FLOW_SEQ</code>, the collection is within a surrounding flow collection, or if the collection is in an implicit key.</p>
<h2 id='alias-nodes'>Alias Nodes</h2><pre class="highlight javascript"><code><span class="kr">class</span> <span class="nx">Alias</span> <span class="kr">extends</span> <span class="nx">Node</span> <span class="p">{</span>
  <span class="nl">source</span><span class="p">:</span> <span class="nx">Scalar</span> <span class="o">|</span> <span class="nx">Map</span> <span class="o">|</span> <span class="nx">Seq</span><span class="p">,</span>
  <span class="nx">type</span><span class="p">:</span> <span class="s1">'ALIAS'</span>
<span class="p">}</span>

<span class="kr">class</span> <span class="nx">Merge</span> <span class="kr">extends</span> <span class="nx">Pair</span> <span class="p">{</span>
  <span class="nl">key</span><span class="p">:</span> <span class="nx">Scalar</span><span class="p">(</span><span class="s1">'&lt;&lt;'</span><span class="p">),</span>      <span class="c1">// defined by the type specification</span>
  <span class="nx">value</span><span class="p">:</span> <span class="nx">Seq</span><span class="o">&lt;</span><span class="nx">Alias</span><span class="p">(</span><span class="nx">Map</span><span class="p">)</span><span class="o">&gt;</span><span class="p">,</span> <span class="c1">// stringified as *A if length = 1</span>
  <span class="nx">type</span><span class="p">:</span> <span class="s1">'MERGE_PAIR'</span>
<span class="p">}</span>
</code></pre>
<p><code>Alias</code> nodes provide a way to include a single node in multiple places in a document; the <code>source</code> of an alias node must be a preceding node in the document. Circular references are supported at the AST level, but cannot be JSON-ified.</p>

<p><code>Merge</code> nodes are not a core YAML 1.2 feature, but are defined as a <a href="http://yaml.org/type/merge.html">YAML 1.1 type</a>. They are only valid directly within a <code>Map#items</code> array and must contain one or more <code>Alias</code> nodes that themselves refer to <code>Map</code> nodes. When the surrounding map is resolved as a plain JS object, the key-value pairs of the aliased maps will be included in the object. Earlier <code>Alias</code> nodes override later ones, as do values set in the object directly.</p>

<p>To create and work with alias and merge nodes, you should use the <a href="#working-with-anchors"><code>YAML.Document#anchors</code></a> object.</p>
<h2 id='creating-nodes'>Creating Nodes</h2><pre class="highlight javascript"><code><span class="kr">const</span> <span class="nx">seq</span> <span class="o">=</span> <span class="nx">YAML</span><span class="p">.</span><span class="nx">createNode</span><span class="p">([</span><span class="s1">'some'</span><span class="p">,</span> <span class="s1">'values'</span><span class="p">,</span> <span class="p">{</span> <span class="na">balloons</span><span class="p">:</span> <span class="mi">99</span> <span class="p">}])</span>
<span class="c1">// YAMLSeq {</span>
<span class="c1">//   items:</span>
<span class="c1">//    [ Scalar { value: 'some' },</span>
<span class="c1">//      Scalar { value: 'values' },</span>
<span class="c1">//      YAMLMap {</span>
<span class="c1">//        items:</span>
<span class="c1">//         [ Pair {</span>
<span class="c1">//             key: Scalar { value: 'balloons' },</span>
<span class="c1">//             value: Scalar { value: 99 } } ] } ] }</span>

<span class="kr">const</span> <span class="nx">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">YAML</span><span class="p">.</span><span class="nx">Document</span><span class="p">()</span>
<span class="nx">doc</span><span class="p">.</span><span class="nx">contents</span> <span class="o">=</span> <span class="nx">seq</span>
<span class="nx">seq</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">comment</span> <span class="o">=</span> <span class="s1">' A commented item'</span>
<span class="nb">String</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span>
<span class="c1">// - some # A commented item</span>
<span class="c1">// - values</span>
<span class="c1">// - balloons: 99</span>
</code></pre><h4 id='yaml-createnode-value-map-seq-scalar'><code>YAML.createNode(value): Map | Seq | Scalar</code></h4><h4 id='yaml-createnode-value-false-map-seq-string-number-boolean-null'><code>YAML.createNode(value, false): Map | Seq | string | number | boolean | null</code></h4>
<p><code>YAML.createNode</code> recursively turns objects into <a href="#collections">collections</a>. Generic objects as well as <code>Map</code> and its descendants become mappings, while arrays and other iterable objects result in sequences. If the second <code>wrapScalars</code> argument is undefined or <code>true</code>, it also wraps plain values in <code>Scalar</code> objects. Its primary use is to enable attaching comments or other metadata to a value, or to otherwise exert more fine-grained control over the stringified output.</p>

<p>To stringify the output of <code>YAML.createNode</code> as YAML, you&#39;ll need to assign it to the <code>contents</code> of a Document (or somewhere within said contents), as the document&#39;s schema is required for YAML string output.</p>

<h4 style="clear:both"><code>new Map(), new Seq(), new Pair(key, value)</code></h4>
<pre class="highlight javascript"><code><span class="kr">import</span> <span class="nx">YAML</span> <span class="nx">from</span> <span class="s1">'yaml'</span>
<span class="kr">import</span> <span class="nx">Pair</span> <span class="nx">from</span> <span class="s1">'yaml/pair'</span>
<span class="kr">import</span> <span class="nx">Seq</span> <span class="nx">from</span> <span class="s1">'yaml/seq'</span>

<span class="kr">const</span> <span class="nx">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">YAML</span><span class="p">.</span><span class="nx">Document</span><span class="p">()</span>
<span class="nx">doc</span><span class="p">.</span><span class="nx">contents</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Seq</span><span class="p">()</span>
<span class="nx">doc</span><span class="p">.</span><span class="nx">contents</span><span class="p">.</span><span class="nx">items</span> <span class="o">=</span> <span class="p">[</span>
  <span class="s1">'some values'</span><span class="p">,</span>
  <span class="mi">42</span><span class="p">,</span>
  <span class="p">{</span> <span class="na">including</span><span class="p">:</span> <span class="s1">'objects'</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="s1">'a string'</span> <span class="p">}</span>
<span class="p">]</span>
<span class="nx">doc</span><span class="p">.</span><span class="nx">contents</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">Pair</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">'a number'</span><span class="p">))</span>

<span class="nx">doc</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
<span class="c1">// - some values</span>
<span class="c1">// - 42</span>
<span class="c1">// - "3": a string</span>
<span class="c1">//   including: objects</span>
<span class="c1">// - 1: a number</span>
</code></pre>
<p>To construct a <code>Seq</code> or <code>Map</code>, use <a href="#yaml-createnode"><code>YAML.createNode()</code></a> with array, object or iterable input, or create the collections directly by importing the classes from <code>yaml/seq</code> and <code>yaml/map</code>.</p>

<p>Once created, normal array operations may be used to modify the <code>items</code> array. New <code>Pair</code> objects may created by importing the class from <code>yaml/pair</code> and using its <code>new Pair(key, value)</code> constructor. Note in particular that this is required to create non-<code>string</code> keys.</p>
<h2 id='comments'>Comments</h2><pre class="highlight javascript"><code><span class="kr">const</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">YAML</span><span class="p">.</span><span class="nx">parseDocument</span><span class="p">(</span><span class="s2">`
# This is YAML.
---
it has:
  - an array
  - of values
`</span><span class="p">)</span>

<span class="nx">doc</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()</span>
<span class="c1">// { 'it has': [ 'an array', 'of values' ] }</span>

<span class="nx">doc</span><span class="p">.</span><span class="nx">commentBefore</span>
<span class="c1">// ' This is YAML.'</span>

<span class="kr">const</span> <span class="nx">seq</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">contents</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">value</span>
<span class="nx">seq</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">comment</span> <span class="o">=</span> <span class="s1">' item comment'</span>
<span class="nx">seq</span><span class="p">.</span><span class="nx">comment</span> <span class="o">=</span> <span class="s1">' collection end comment'</span>

<span class="nx">doc</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
<span class="c1">// # This is YAML.</span>
<span class="c1">// it has:</span>
<span class="c1">//   - an array # item comment</span>
<span class="c1">//   - of values</span>
<span class="c1">//   # collection end comment</span>
</code></pre>
<p>A primary differentiator between this and other YAML libraries is the ability to programmatically handle comments, which according to <a href="http://yaml.org/spec/1.2/spec.html#id2767100">the spec</a> &quot;must not have any effect on the serialization tree or representation graph. In particular, comments are not associated with a particular node.&quot;</p>

<p>This library does allow comments to be handled programmatically, and does attach them to particular nodes. Each <code>Scalar</code>, <code>Map</code>, <code>Seq</code> and the <code>Document</code> itself has <code>comment</code> and <code>commentBefore</code> members that may be set to a stringifiable value. The string contents of comments are not processed by the library, except for merging adjacent comment lines together and prefixing each line with the <code>#</code> comment indicator.</p>

<p><strong>Note</strong>: Due to implementation details, the library&#39;s comment handling is not completely stable. In particular, when reading and writing a YAML file, comments may move around a bit due to getting associated with a different node than intended.</p>
